{"version":3,"sources":["components/Container.js","components/Jumbotron.js","utils/API.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","styles","image","backgroundImage","Jumbotron","style","getEmployeeName","axios","get","TableContainer","state","employees","employeeInfo","loadEmployees","then","response","data","results","setState","a","buildData","isLoading","catch","err","console","log","callBackendAPI","fetch","json","body","status","Error","message","map","employee","employeePicture","src","picture","medium","alt","firstName","name","first","lastName","last","phoneNumber","phone","email","this","res","express","columns","label","field","sort","width","rows","striped","order","bordered","small","searchTop","searchBottom","entriesOptions","entries","materialSearch","hover","fullPagination","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"wQAOeA,MALf,SAAmBC,GAEjB,OAAO,yBAAKC,UAAU,aAAaD,EAAME,WCFrCC,EAAS,CACbC,MAAM,CACJC,gBAAiB,mHAcNC,MAXf,WACE,OACE,yBAAKL,UAAU,4BAA4BM,MAAOJ,EAAOC,OACvD,yBAAKH,UAAU,mBACb,wBAAIA,UAAU,oCAAd,cACA,uBAAGA,UAAU,+BAAb,mD,iBCVO,SAASO,IAEpB,OAAOC,IAAMC,IADG,iD,YCiHLC,E,4MA7GbC,MAAQ,CACNC,UAAW,GACXC,aAAc,I,EAUhBC,cAAgB,iBAAM,CACpBP,IACGQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BH,MAAK,SAAAE,GACJ,EAAKE,SAAS,CAAEP,UAAWK,OAG5BF,KANH,sBAMQ,sBAAAK,EAAA,sDACJ,EAAKD,SAAS,CAAEN,aAAc,EAAKQ,YAAaC,WAAW,IADvD,4CAGLC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,EAIlBG,e,sBAAiB,8BAAAP,EAAA,sEACQQ,MAAM,KADd,cACTZ,EADS,gBAEIA,EAASa,OAFb,UAETC,EAFS,OAIS,MAApBd,EAASe,OAJE,sBAKPC,MAAMF,EAAKG,SALJ,gCAORH,GAPQ,2C,EASjBT,UAAY,WAeV,OAdgB,EAAKV,MAAMC,UAAUsB,KAAI,SAACC,GACxC,MACE,CACEC,gBAAkB,yBAClBC,IAAKF,EAASG,QAAQC,OACtBC,IAAI,aAEJC,UAAWN,EAASO,KAAKC,MACzBC,SAAUT,EAASO,KAAKG,KACxBC,YAAaX,EAASY,MACtBC,MAAOb,EAASa,W,kEA1CH,IAAD,OAClBC,KAAKnC,gBACLmC,KAAKtB,iBACFZ,MAAK,SAAAmC,GAAG,OAAI,EAAK/B,SAAS,CAAEF,KAAMiC,EAAIC,aACtC5B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BA8C5B,IAAMP,EAAO,CACXmC,QAAS,CACP,CACEC,MAAO,mBACPC,MAAO,kBACPC,KAAM,WACNC,MAAO,KAET,CACEH,MAAO,aACPC,MAAO,YACPE,MAAO,KAET,CACEH,MAAO,YACPC,MAAO,WACPE,MAAO,KAET,CACEH,MAAO,eACPC,MAAO,cACPE,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPE,MAAO,MAGXC,KAAMR,KAAKtC,MAAME,cAGnB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACE6C,SAAO,EACPC,MAAO,CAAC,YAAa,OACrBC,UAAQ,EACRC,OAAK,EACL5C,KAAMA,EACN6C,WAAS,EACTC,cAAc,EACdC,eAAgB,CAAC,EAAG,GAAI,IACxBC,QAAS,EACTC,gBAAc,EACdC,OAAK,EACLC,gBAAc,S,GAvGKC,aCOdC,MANf,WACE,OACE,kBAAC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEd9D,OAAM,SAAA+D,GACL7D,QAAQ6D,MAAMA,EAAMrD,a","file":"static/js/main.57b55bd7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  // eslint-disable-next-line react/prop-types\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\nconst imageurl = \"https://placeimg.com/1200/480/nature\"\nconst styles = {\n  image:{\n    backgroundImage: \"linear-gradient(to bottom, rgba(0,0,0,0.6) 0%,rgba(0,0,0,0.6) 100%), url(\" + imageurl + \")\"\n  }\n};\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\" style={styles.image}>\n      <div className=\"container-fluid\">\n        <h1 className=\"display-3 text-center text-white\">Who's Who?</h1>\n        <p className=\"lead text-center text-white\">A Searchable and Sortable Employee Directory</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import axios from \"axios\";\n\nexport default function getEmployeeName() {\n    const BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n    return axios.get(BASEURL);\n}","import React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Jumbotron from \"./Jumbotron\";\nimport getEmployeeName from \"../utils/API\";\nimport { MDBDataTableV5 } from 'mdbreact';\n\nclass TableContainer extends Component {\n  state = {\n    employees: [],\n    employeeInfo: []\n  }\n\n  componentDidMount() {\n    this.loadEmployees();\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  loadEmployees = () => [\n    getEmployeeName()\n      .then(response => response.data.results)\n      .then(data => {\n        this.setState({ employees: data })\n      })\n\n      .then(async () => {\n        this.setState({ employeeInfo: this.buildData(), isLoading: false })\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  ];\n\n  callBackendAPI = async () => {\n    const response = await fetch('/');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n  buildData = () => {\n    let employees = this.state.employees.map((employee) => {\n      return (\n        {\n          employeePicture:  <img\n          src={employee.picture.medium}\n          alt='employee'\n      />,\n          firstName: employee.name.first,\n          lastName: employee.name.last,\n          phoneNumber: employee.phone,\n          email: employee.email,\n        }\n      )\n    });\n    return employees;\n  }\n\n  render() {\n    const data = {\n      columns: [\n        {\n          label: 'Employee Picture',\n          field: 'employeePicture',\n          sort: 'disabled',\n          width: 150\n        },\n        {\n          label: 'First Name',\n          field: 'firstName',\n          width: 150\n        },\n        {\n          label: 'Last Name',\n          field: 'lastName',\n          width: 270\n        },\n        {\n          label: 'Phone Number',\n          field: 'phoneNumber',\n          width: 200\n        },\n        {\n          label: 'Email',\n          field: 'email',\n          width: 100\n        }\n      ],\n      rows: this.state.employeeInfo\n    };\n\n    return (\n      <Container>\n        <Jumbotron />\n        <MDBDataTableV5\n          striped\n          order={['firstName', 'asc' ]}\n          bordered\n          small\n          data={data}\n          searchTop\n          searchBottom={false}\n          entriesOptions={[5, 20, 25]}\n          entries={5}\n          materialSearch\n          hover\n          fullPagination \n        />\n      </Container>\n    );\n  }\n}\n\nexport default TableContainer;\n","import '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport React from 'react';\nimport './App.css';\nimport TableContainer from \"./components/TableContainer.js\"\n\nfunction App() {\n  return (\n    <TableContainer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}